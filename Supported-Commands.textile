h1. Supported Commands

Below is a full list of formatting commands supported by wysihtml5.

* bold
* createLink
* fontSize
* foreColor
* formatBlock
* formatInline
* insertHTML
* insertImage
* insertLineBreak
* insertOrderedList
* insertUnorderedList
* italic
* justifyCenter
* justifyLeft
* justifyRight
* underline

h2. bold

* Generated markup:
<pre><code><b>text</b></code></pre>
* Toolbar element:
<pre><code><a data-wysihtml5-command="bold">bold</a></code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  tags: {
    "b": 1
    // if you want to turn all <strong> elements into <b> (optional)
   "strong": { "rename_tag": "b" }
  }
};
</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("bold");</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/bold.js

h2. createLink

* Generated markup:
<pre><code><!-- target="_blank" and rel="nofollow" are only set when defined in parser rules -->
<a href="http://url" target="_blank" rel="nofollow">link</a>
</code></pre>
* Toolbar element:
<pre><code><!-- User can define the link's href: -->
<a data-wysihtml5-command="createLink">insert link</a>
<div data-wysihtml5-dialog="createLink">
  <label>
    Link:
    <input data-wysihtml5-dialog-field="href" value="http://" class="text">
  </label>
  <a data-wysihtml5-dialog-action="save">OK</a>
  <a data-wysihtml5-dialog-action="cancel">Cancel</a>
</div>
<!-- Pre-defined href -->
<a data-wysihtml5-command="createLink" data-wysihtml5-command-value="http://www.google.com">insert google link</a>
</code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  tags: {
    "a": {
      "check_attributes": {
        "href": "url" // make sure the entered url is really an url
      },
      "set_attributes": {
        "rel": "nofollow",   // optional
        "target": "_blank"   // optional
      }
    }
  }
};
</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("createLink", { href: "http://google.com", target: "_blank", nofollow: "rel" });</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/createLink.js

h2. fontSize

* Generated markup:
<pre><code><!-- XXS -->
<span class="wysiwyg-font-size-xx-small">text</span>
<!-- XS -->
<span class="wysiwyg-font-size-x-small">text</span>
<!-- S -->
<span class="wysiwyg-font-size-small">text</span>
<!-- M -->
<span class="wysiwyg-font-size-medium">text</span>
<!-- L -->
<span class="wysiwyg-font-size-large">text</span>
<!-- XL -->
<span class="wysiwyg-font-size-x-large">text</span>
<!-- XXL -->
<span class="wysiwyg-font-size-xx-large">text</span>
<!-- Smaller (relative, similar to html4's <small> element) -->
<span class="wysiwyg-font-size-smaller">text</span>
<!-- Larger (relative, similar to html4's <big> element) -->
<span class="wysiwyg-font-size-larger">text</span>
</code></pre>
* Toolbar elements:
<pre><code><a data-wysihtml5-command="fontSize" data-wysihtml5-command-value="small">small</a>
<a data-wysihtml5-command="fontSize" data-wysihtml5-command-value="large">large</a></code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  classes: {
    "wysiwyg-font-size-large": 1,
    "wysiwyg-font-size-larger": 1,
    "wysiwyg-font-size-medium": 1,
    "wysiwyg-font-size-small": 1,
    "wysiwyg-font-size-smaller": 1,
    "wysiwyg-font-size-x-large": 1,
    "wysiwyg-font-size-x-small": 1,
    "wysiwyg-font-size-xx-large": 1,
    "wysiwyg-font-size-xx-small": 1
  },
  tags: {
    "span": 1,
    // if you want to transform html4 elements to valid html5 (optional)
    "small": {
      "rename_tag": "span",
      "set_class": "wysiwyg-font-size-smaller"
    },
    "big": {
      "rename_tag": "span",
      "set_class": "wysiwyg-font-size-larger"
    }
  }
};
</code></pre>
* Required CSS:
<pre><code>.wysiwyg-font-size-smaller {
  font-size: smaller;
}
.wysiwyg-font-size-larger {
  font-size: larger;
}
.wysiwyg-font-size-xx-large {
  font-size: xx-large;
}
.wysiwyg-font-size-x-large {
  font-size: x-large;
}
.wysiwyg-font-size-large {
  font-size: large;
}
.wysiwyg-font-size-medium {
  font-size: medium;
}
.wysiwyg-font-size-small {
  font-size: small;
}
.wysiwyg-font-size-x-small {
  font-size: x-small;
}
.wysiwyg-font-size-xx-small {
  font-size: xx-small;
}</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("fontSize", "xx-large");</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/fontSize.js

h2. foreColor

* Generated markup:
<pre><code><!-- Red -->
<span class="wysiwyg-font-color-red">text</span>
<!-- Green -->
<span class="wysiwyg-font-color-green">text</span>
<!-- Blue -->
<span class="wysiwyg-font-color-blue">text</span>
<!-- ... and many more colors possible --></code></pre>
* Toolbar elements:
<pre><code><a data-wysihtml5-command="foreColor" data-wysihtml5-command-value="red">red</a>
<a data-wysihtml5-command="foreColor" data-wysihtml5-command-value="green">green</a>
<a data-wysihtml5-command="foreColor" data-wysihtml5-command-value="blue">blue</a></code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  classes: {
    "wysiwyg-color-aqua": 1,
    "wysiwyg-color-black": 1,
    "wysiwyg-color-blue": 1,
    "wysiwyg-color-fuchsia": 1,
    "wysiwyg-color-gray": 1,
    "wysiwyg-color-green": 1,
    "wysiwyg-color-lime": 1,
    "wysiwyg-color-maroon": 1,
    "wysiwyg-color-navy": 1,
    "wysiwyg-color-olive": 1,
    "wysiwyg-color-purple": 1,
    "wysiwyg-color-red": 1,
    "wysiwyg-color-silver": 1,
    "wysiwyg-color-teal": 1,
    "wysiwyg-color-white": 1,
    "wysiwyg-color-xing": 1,
    "wysiwyg-color-yellow": 1
  },
  tags: {
    "span": 1
  }
};
</code></pre>
* Required CSS:
<pre><code>.wysiwyg-color-black {
  color: black;
}
.wysiwyg-color-silver {
  color: silver;
}
.wysiwyg-color-gray {
  color: gray;
}
.wysiwyg-color-white {
  color: white;
}
.wysiwyg-color-maroon {
  color: maroon;
}
.wysiwyg-color-red {
  color: red;
}
.wysiwyg-color-purple {
  color: purple;
}
.wysiwyg-color-fuchsia {
  color: fuchsia;
}
.wysiwyg-color-green {
  color: green;
}
.wysiwyg-color-lime {
  color: lime;
}
.wysiwyg-color-olive {
  color: olive;
}
.wysiwyg-color-yellow {
  color: yellow;
}
.wysiwyg-color-navy {
  color: navy;
}
.wysiwyg-color-blue {
  color: blue;
}
.wysiwyg-color-teal {
  color: teal;
}
.wysiwyg-color-aqua {
  color: aqua;
}</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("foreColor", "yellow");</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/foreColor.js

h2. formatBlock

*Please note:* formatBlock can be used to format the current selection into any block element (h1, h2, p, blockquote, ...). The following is an example using the H1 tag.
* Generated markup:
<pre><code><h1>text</h1></code></pre></code></pre>
* Toolbar element:
<pre><code><a data-wysihtml5-command="formatBlock" data-wysihtml5-command-value="h1">heading 1</a></code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  tags: {
    "h1": 1
  }
};
</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("formatBlock", "h1");</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/formatBlock.js

h2. formatInline

*Please note:* formatInline can be used to format the current selection into any inline element (span, strong, time, ...). The following is an example using the SPAN tag.
* Generated markup:
<pre><code><span>text</span></code></pre></code></pre>
* Toolbar element:
<pre><code><a data-wysihtml5-command="formatInline" data-wysihtml5-command-value="span">span</a></code></pre>
* Required parser rules:
<pre><code>var wysihtml5ParserRules = {
  tags: {
    "span": 1
  }
};
</code></pre>
* Trigger via JavaScript:
<pre><code>editorInstance.composer.commands.exec("formatInline", "span");</code></pre>
* "Source code":https://github.com/xing/wysihtml5/blob/master/src/commands/formatInline.js